name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  # Data Integrity Checks
  data-validation:
    name: Data Integrity Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check for duplicate pioneers
        run: |
          echo "üîç Checking for duplicate pioneers..."
          npm run check-duplicates

      - name: Validate pioneer data structure
        run: |
          echo "üîç Validating pioneer data structure..."
          npm run validate-data

      - name: Check image files exist
        run: |
          echo "üîç Checking image files..."
          npm run check-images

      - name: Check for temporary/script files
        run: |
          echo "üîç Checking for temporary or script files..."
          if find . -name "*.temp" -o -name "temp-*" -o -name "*backup*" | grep -q .; then
            echo "‚ùå Found temporary or backup files in repository"
            find . -name "*.temp" -o -name "temp-*" -o -name "*backup*"
            exit 1
          fi
          echo "‚úÖ No temporary files found"

  # JavaScript Syntax Check
  lint:
    name: JavaScript Syntax Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check JavaScript syntax
        run: |
          echo "üîç Checking JavaScript syntax..."
          # Exclude node_modules, .git, and archive directories
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" -not -path "./archive/*" | while read file; do
            echo "Checking: $file"
            node -c "$file" || exit 1
          done
          echo "‚úÖ All JavaScript files passed syntax check"

      - name: Run ESLint (if eslint config exists)
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f ".eslintrc.yml" ]; then
            npx eslint . --ext .js --ignore-pattern archive/
          else
            echo "No ESLint configuration found, skipping ESLint check"
          fi

      - name: Validate HTML
        run: |
          echo "üîç Validating HTML..."
          if command -v html-validate &> /dev/null; then
            html-validate index.html
          else
            echo "html-validate not available, skipping HTML validation"
          fi

  # Build and Test
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [lint, data-validation]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run basic file existence tests
        run: |
          echo "üß™ Running basic tests..."

          # Test if the main files exist and are valid
          if [ ! -f "index.html" ]; then
            echo "‚ùå index.html not found"
            exit 1
          fi

          if [ ! -f "js/pioneers/index.json" ]; then
            echo "‚ùå js/pioneers/index.json not found"
            exit 1
          fi

          if [ ! -f "css/styles.css" ]; then
            echo "‚ùå css/styles.css not found"
            exit 1
          fi

          echo "‚úÖ All required files exist"

      - name: Run Playwright UI tests
        run: |
          echo "üß™ Running Playwright UI tests..."
          npm run test
        env:
          CI: true

  # Accessibility and Performance Checks
  accessibility:
    name: Accessibility and Performance
    runs-on: ubuntu-latest
    needs: [lint, data-validation]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Lighthouse
        run: |
          echo "üì¶ Installing Lighthouse..."
          npm install -g lighthouse || echo "Lighthouse installation failed"

      - name: Start local server
        run: |
          echo "üöÄ Starting local server..."
          npx http-server . -p 8000 &
          sleep 10
          curl -f http://localhost:8000 || echo "Server not responding"

      - name: Run Lighthouse CI (optional)
        run: |
          echo "üîç Running Lighthouse CI (optional)..."
          if command -v lighthouse &> /dev/null; then
            lighthouse http://localhost:8000 --output html --output-path ./lighthouse-report.html --only-categories=accessibility,performance --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" || echo "Lighthouse check completed"
            ls -la lighthouse-report.html || echo "Lighthouse report not generated"
          else
            echo "Lighthouse not available, skipping performance check"
            touch lighthouse-report.html
          fi

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: lighthouse-report.html

  # Content Quality Checks
  content-quality:
    name: Content Quality Validation
    runs-on: ubuntu-latest
    needs: [data-validation]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check content quality
        run: |
          echo "üîç Checking content quality..."
          npm run check-content

  # Deploy to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [lint, test, data-validation, accessibility, content-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
